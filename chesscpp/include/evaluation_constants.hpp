#ifndef EVAL_CONSTANTS
#define EVAL_CONSTANTS

#include "constants.hpp"

enum Phase
{
    OPENING,
    ENDGAME
};
// evaluations values from https://github.com/GunshipPenguin/shallow-blue/blob/master/src/eval.h
const int passed_pawn_bonus[2] = {[OPENING] = 10, [ENDGAME] = 70};
const int doubled_pawn_penalty[2] = {[OPENING] = -20, [ENDGAME] = -30};
const int isolated_pawn_penalty[2] = {[OPENING] = -15, [ENDGAME] = -30};

const float initial_ps_value[2] = {[OPENING] = -75., [ENDGAME] = -295.};

const uint64_t isolated_pawn_mask[8] = {
    col_b,
    col_a | col_c,
    col_b | col_d,
    col_c | col_e,
    col_d | col_f,
    col_e | col_g,
    col_f | col_h,
    col_g};

const int material_values[2][7] = {
    [OPENING] = {
        [pPawn] = 100,
        [pRook] = 500,
        [pKnight] = 320,
        [pBishop] = 330,
        [pQueen] = 900,
        [pKing] = 0},
    [ENDGAME] = {[pPawn] = 140, [pRook] = 500, [pKnight] = 300, [pBishop] = 300, [pQueen] = 900, [pKing] = 0}};

const int phase_weights[7] = {
    [b_pawns] = 0,
    [b_rooks] = 2,
    [b_knights] = 1,
    [b_bishops] = 1,
    [b_queens] = 4,
    [b_kings] = 0};

const int initial_phase_weights =
    16 * phase_weights[b_pawns] +
    4 * phase_weights[b_rooks] +
    4 * phase_weights[b_knights] +
    4 * phase_weights[b_bishops] +
    2 * phase_weights[b_queens] +
    2 * phase_weights[b_kings];

const int rook_open_file_bonus[2] = {[OPENING] = 20, [ENDGAME] = 40};
const int bishop_pair_bonus[2] = {[OPENING] = 45, [ENDGAME] = 55};
const int king_pawn_shield_bonus[2] = {[OPENING] = 10, [ENDGAME] = 0};

const int mobility_bonus[2][7] = {
    [OPENING] = {
        [pPawn] = 0,
        [pRook] = 0,
        [pKnight] = 4,
        [pBishop] = 3,
        [pQueen] = 0,
        [pKing] = 0},
    [ENDGAME] = {[pPawn] = 1, [pRook] = 1, [pKnight] = 6, [pBishop] = 2, [pQueen] = 1, [pKing] = 1}};

const std::map<float, int> color_to_king_shield_idx = {{1., 0}, {-1, 1}};
const uint64_t king_shield[2][64] =
    {
        {
            0x6060000000000000LL,
            0x3030000000000000LL,
            0x1818000000000000LL,
            0xc0c000000000000LL,
            0x606000000000000LL,
            0x303000000000000LL,
            0x101000000000000LL,
            0x0LL,
            0x6060600000000000LL,
            0x3030300000000000LL,
            0x1818180000000000LL,
            0xc0c0c0000000000LL,
            0x606060000000000LL,
            0x303030000000000LL,
            0x101010000000000LL,
            0x0LL,
            0x60606000000000LL,
            0x30303000000000LL,
            0x18181800000000LL,
            0xc0c0c00000000LL,
            0x6060600000000LL,
            0x3030300000000LL,
            0x1010100000000LL,
            0x0LL,
            0x606060000000LL,
            0x303030000000LL,
            0x181818000000LL,
            0xc0c0c000000LL,
            0x60606000000LL,
            0x30303000000LL,
            0x10101000000LL,
            0x0LL,
            0x6060600000LL,
            0x3030300000LL,
            0x1818180000LL,
            0xc0c0c0000LL,
            0x606060000LL,
            0x303030000LL,
            0x101010000LL,
            0x0LL,
            0x60606000LL,
            0x30303000LL,
            0x18181800LL,
            0xc0c0c00LL,
            0x6060600LL,
            0x3030300LL,
            0x1010100LL,
            0x0LL,
            0x606060LL,
            0x303030LL,
            0x181818LL,
            0xc0c0cLL,
            0x60606LL,
            0x30303LL,
            0x10101LL,
            0x0LL,
            0x6060LL,
            0x3030LL,
            0x1818LL,
            0xc0cLL,
            0x606LL,
            0x303LL,
            0x101LL,
            0x0LL,
        },
        {
            0x0LL,
            0x8080000000000000LL,
            0xc0c0000000000000LL,
            0x6060000000000000LL,
            0x3030000000000000LL,
            0x1818000000000000LL,
            0xc0c000000000000LL,
            0x606000000000000LL,
            0x0LL,
            0x8080800000000000LL,
            0xc0c0c00000000000LL,
            0x6060600000000000LL,
            0x3030300000000000LL,
            0x1818180000000000LL,
            0xc0c0c0000000000LL,
            0x606060000000000LL,
            0x0LL,
            0x80808000000000LL,
            0xc0c0c000000000LL,
            0x60606000000000LL,
            0x30303000000000LL,
            0x18181800000000LL,
            0xc0c0c00000000LL,
            0x6060600000000LL,
            0x0LL,
            0x808080000000LL,
            0xc0c0c0000000LL,
            0x606060000000LL,
            0x303030000000LL,
            0x181818000000LL,
            0xc0c0c000000LL,
            0x60606000000LL,
            0x0LL,
            0x8080800000LL,
            0xc0c0c00000LL,
            0x6060600000LL,
            0x3030300000LL,
            0x1818180000LL,
            0xc0c0c0000LL,
            0x606060000LL,
            0x0LL,
            0x80808000LL,
            0xc0c0c000LL,
            0x60606000LL,
            0x30303000LL,
            0x18181800LL,
            0xc0c0c00LL,
            0x6060600LL,
            0x0LL,
            0x808080LL,
            0xc0c0c0LL,
            0x606060LL,
            0x303030LL,
            0x181818LL,
            0xc0c0cLL,
            0x60606LL,
            0x0LL,
            0x8080LL,
            0xc0c0LL,
            0x6060LL,
            0x3030LL,
            0x1818LL,
            0xc0cLL,
            0x606LL,
        }};

// white, black
const std::map<float, int> color_to_pawn_mask_idx = {{1., 0}, {-1, 1}};
const uint64_t passed_pawn_mask[2][64] = {{
                                              0x7f7f000000000000LL,
                                              0x3f3f000000000000LL,
                                              0x1f1f000000000000LL,
                                              0xf0f000000000000LL,
                                              0x707000000000000LL,
                                              0x303000000000000LL,
                                              0x101000000000000LL,
                                              0x0LL,
                                              0x7f7f7f0000000000LL,
                                              0x3f3f3f0000000000LL,
                                              0x1f1f1f0000000000LL,
                                              0xf0f0f0000000000LL,
                                              0x707070000000000LL,
                                              0x303030000000000LL,
                                              0x101010000000000LL,
                                              0x0LL,
                                              0x7f7f7f00000000LL,
                                              0x3f3f3f00000000LL,
                                              0x1f1f1f00000000LL,
                                              0xf0f0f00000000LL,
                                              0x7070700000000LL,
                                              0x3030300000000LL,
                                              0x1010100000000LL,
                                              0x0LL,
                                              0x7f7f7f000000LL,
                                              0x3f3f3f000000LL,
                                              0x1f1f1f000000LL,
                                              0xf0f0f000000LL,
                                              0x70707000000LL,
                                              0x30303000000LL,
                                              0x10101000000LL,
                                              0x0LL,
                                              0x7f7f7f0000LL,
                                              0x3f3f3f0000LL,
                                              0x1f1f1f0000LL,
                                              0xf0f0f0000LL,
                                              0x707070000LL,
                                              0x303030000LL,
                                              0x101010000LL,
                                              0x0LL,
                                              0x7f7f7f00LL,
                                              0x3f3f3f00LL,
                                              0x1f1f1f00LL,
                                              0xf0f0f00LL,
                                              0x7070700LL,
                                              0x3030300LL,
                                              0x1010100LL,
                                              0x0LL,
                                              0x7f7f7fLL,
                                              0x3f3f3fLL,
                                              0x1f1f1fLL,
                                              0xf0f0fLL,
                                              0x70707LL,
                                              0x30303LL,
                                              0x10101LL,
                                              0x0LL,
                                              0x7f7fLL,
                                              0x3f3fLL,
                                              0x1f1fLL,
                                              0xf0fLL,
                                              0x707LL,
                                              0x303LL,
                                              0x101LL,
                                              0x0LL,
                                          },
                                          {
                                              0x0LL,
                                              0x8080000000000000LL,
                                              0xc0c0000000000000LL,
                                              0xe0e0000000000000LL,
                                              0xf0f0000000000000LL,
                                              0xf8f8000000000000LL,
                                              0xfcfc000000000000LL,
                                              0xfefe000000000000LL,
                                              0x0LL,
                                              0x8080800000000000LL,
                                              0xc0c0c00000000000LL,
                                              0xe0e0e00000000000LL,
                                              0xf0f0f00000000000LL,
                                              0xf8f8f80000000000LL,
                                              0xfcfcfc0000000000LL,
                                              0xfefefe0000000000LL,
                                              0x0LL,
                                              0x80808000000000LL,
                                              0xc0c0c000000000LL,
                                              0xe0e0e000000000LL,
                                              0xf0f0f000000000LL,
                                              0xf8f8f800000000LL,
                                              0xfcfcfc00000000LL,
                                              0xfefefe00000000LL,
                                              0x0LL,
                                              0x808080000000LL,
                                              0xc0c0c0000000LL,
                                              0xe0e0e0000000LL,
                                              0xf0f0f0000000LL,
                                              0xf8f8f8000000LL,
                                              0xfcfcfc000000LL,
                                              0xfefefe000000LL,
                                              0x0LL,
                                              0x8080800000LL,
                                              0xc0c0c00000LL,
                                              0xe0e0e00000LL,
                                              0xf0f0f00000LL,
                                              0xf8f8f80000LL,
                                              0xfcfcfc0000LL,
                                              0xfefefe0000LL,
                                              0x0LL,
                                              0x80808000LL,
                                              0xc0c0c000LL,
                                              0xe0e0e000LL,
                                              0xf0f0f000LL,
                                              0xf8f8f800LL,
                                              0xfcfcfc00LL,
                                              0xfefefe00LL,
                                              0x0LL,
                                              0x808080LL,
                                              0xc0c0c0LL,
                                              0xe0e0e0LL,
                                              0xf0f0f0LL,
                                              0xf8f8f8LL,
                                              0xfcfcfcLL,
                                              0xfefefeLL,
                                              0x0LL,
                                              0x8080LL,
                                              0xc0c0LL,
                                              0xe0e0LL,
                                              0xf0f0LL,
                                              0xf8f8LL,
                                              0xfcfcLL,
                                              0xfefeLL,
                                          }};

#endif